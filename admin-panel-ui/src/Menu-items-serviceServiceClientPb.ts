/**
 * @fileoverview gRPC-Web generated client stub for telegramMenuSystem
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.14.0
// source: menu-items-service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as menu$items$service_pb from './menu-items-service_pb';


export class CategoryDetailsServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorfetchMenuCategoryDetails = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.CategoryDetailsService/fetchMenuCategoryDetails',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.FetchCategoryDetailsRequest,
    menu$items$service_pb.CategoryDetails,
    (request: menu$items$service_pb.FetchCategoryDetailsRequest) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.CategoryDetails.deserializeBinary
  );

  fetchMenuCategoryDetails(
    request: menu$items$service_pb.FetchCategoryDetailsRequest,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.CategoryDetails>;

  fetchMenuCategoryDetails(
    request: menu$items$service_pb.FetchCategoryDetailsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.CategoryDetails) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.CategoryDetails>;

  fetchMenuCategoryDetails(
    request: menu$items$service_pb.FetchCategoryDetailsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.CategoryDetails) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.CategoryDetailsService/fetchMenuCategoryDetails',
        request,
        metadata || {},
        this.methodDescriptorfetchMenuCategoryDetails,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.CategoryDetailsService/fetchMenuCategoryDetails',
    request,
    metadata || {},
    this.methodDescriptorfetchMenuCategoryDetails);
  }

}

export class MenuCategoriesServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorgetAllCategories = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.MenuCategoriesService/getAllCategories',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.Empty,
    menu$items$service_pb.Categories,
    (request: menu$items$service_pb.Empty) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.Categories.deserializeBinary
  );

  getAllCategories(
    request: menu$items$service_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.Categories>;

  getAllCategories(
    request: menu$items$service_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Categories) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.Categories>;

  getAllCategories(
    request: menu$items$service_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Categories) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.MenuCategoriesService/getAllCategories',
        request,
        metadata || {},
        this.methodDescriptorgetAllCategories,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.MenuCategoriesService/getAllCategories',
    request,
    metadata || {},
    this.methodDescriptorgetAllCategories);
  }

  methodDescriptoraddCategory = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.MenuCategoriesService/addCategory',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.AddCategoryRequest,
    menu$items$service_pb.Empty,
    (request: menu$items$service_pb.AddCategoryRequest) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.Empty.deserializeBinary
  );

  addCategory(
    request: menu$items$service_pb.AddCategoryRequest,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.Empty>;

  addCategory(
    request: menu$items$service_pb.AddCategoryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.Empty>;

  addCategory(
    request: menu$items$service_pb.AddCategoryRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.MenuCategoriesService/addCategory',
        request,
        metadata || {},
        this.methodDescriptoraddCategory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.MenuCategoriesService/addCategory',
    request,
    metadata || {},
    this.methodDescriptoraddCategory);
  }

  methodDescriptorchangeCategoryDetails = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.MenuCategoriesService/changeCategoryDetails',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.ChangeCategoryDetailsRequest,
    menu$items$service_pb.Empty,
    (request: menu$items$service_pb.ChangeCategoryDetailsRequest) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.Empty.deserializeBinary
  );

  changeCategoryDetails(
    request: menu$items$service_pb.ChangeCategoryDetailsRequest,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.Empty>;

  changeCategoryDetails(
    request: menu$items$service_pb.ChangeCategoryDetailsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.Empty>;

  changeCategoryDetails(
    request: menu$items$service_pb.ChangeCategoryDetailsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.MenuCategoriesService/changeCategoryDetails',
        request,
        metadata || {},
        this.methodDescriptorchangeCategoryDetails,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.MenuCategoriesService/changeCategoryDetails',
    request,
    metadata || {},
    this.methodDescriptorchangeCategoryDetails);
  }

  methodDescriptorremoveCategory = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.MenuCategoriesService/removeCategory',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.RemoveCategoryRequest,
    menu$items$service_pb.Empty,
    (request: menu$items$service_pb.RemoveCategoryRequest) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.Empty.deserializeBinary
  );

  removeCategory(
    request: menu$items$service_pb.RemoveCategoryRequest,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.Empty>;

  removeCategory(
    request: menu$items$service_pb.RemoveCategoryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.Empty>;

  removeCategory(
    request: menu$items$service_pb.RemoveCategoryRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.MenuCategoriesService/removeCategory',
        request,
        metadata || {},
        this.methodDescriptorremoveCategory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.MenuCategoriesService/removeCategory',
    request,
    metadata || {},
    this.methodDescriptorremoveCategory);
  }

}

export class DishServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorgetDishById = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.DishService/getDishById',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.GetDishRequest,
    menu$items$service_pb.Dish,
    (request: menu$items$service_pb.GetDishRequest) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.Dish.deserializeBinary
  );

  getDishById(
    request: menu$items$service_pb.GetDishRequest,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.Dish>;

  getDishById(
    request: menu$items$service_pb.GetDishRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Dish) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.Dish>;

  getDishById(
    request: menu$items$service_pb.GetDishRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Dish) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.DishService/getDishById',
        request,
        metadata || {},
        this.methodDescriptorgetDishById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.DishService/getDishById',
    request,
    metadata || {},
    this.methodDescriptorgetDishById);
  }

  methodDescriptoraddDish = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.DishService/addDish',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.AddDishRequest,
    menu$items$service_pb.Empty,
    (request: menu$items$service_pb.AddDishRequest) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.Empty.deserializeBinary
  );

  addDish(
    request: menu$items$service_pb.AddDishRequest,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.Empty>;

  addDish(
    request: menu$items$service_pb.AddDishRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.Empty>;

  addDish(
    request: menu$items$service_pb.AddDishRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.DishService/addDish',
        request,
        metadata || {},
        this.methodDescriptoraddDish,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.DishService/addDish',
    request,
    metadata || {},
    this.methodDescriptoraddDish);
  }

  methodDescriptorupdateDishDetails = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.DishService/updateDishDetails',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.UpdateDishDetailsRequest,
    menu$items$service_pb.Empty,
    (request: menu$items$service_pb.UpdateDishDetailsRequest) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.Empty.deserializeBinary
  );

  updateDishDetails(
    request: menu$items$service_pb.UpdateDishDetailsRequest,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.Empty>;

  updateDishDetails(
    request: menu$items$service_pb.UpdateDishDetailsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.Empty>;

  updateDishDetails(
    request: menu$items$service_pb.UpdateDishDetailsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.DishService/updateDishDetails',
        request,
        metadata || {},
        this.methodDescriptorupdateDishDetails,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.DishService/updateDishDetails',
    request,
    metadata || {},
    this.methodDescriptorupdateDishDetails);
  }

  methodDescriptorremoveDish = new grpcWeb.MethodDescriptor(
    '/telegramMenuSystem.DishService/removeDish',
    grpcWeb.MethodType.UNARY,
    menu$items$service_pb.RemoveDishRequest,
    menu$items$service_pb.Empty,
    (request: menu$items$service_pb.RemoveDishRequest) => {
      return request.serializeBinary();
    },
    menu$items$service_pb.Empty.deserializeBinary
  );

  removeDish(
    request: menu$items$service_pb.RemoveDishRequest,
    metadata: grpcWeb.Metadata | null): Promise<menu$items$service_pb.Empty>;

  removeDish(
    request: menu$items$service_pb.RemoveDishRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void): grpcWeb.ClientReadableStream<menu$items$service_pb.Empty>;

  removeDish(
    request: menu$items$service_pb.RemoveDishRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: menu$items$service_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/telegramMenuSystem.DishService/removeDish',
        request,
        metadata || {},
        this.methodDescriptorremoveDish,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/telegramMenuSystem.DishService/removeDish',
    request,
    metadata || {},
    this.methodDescriptorremoveDish);
  }

}

